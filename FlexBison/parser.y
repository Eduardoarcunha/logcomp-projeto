%{
#include "parser.tab.h"
#include <stdio.h>
extern int yylval;
void yyerror(const char *s) {
    extern int yylineno;  // Line number from Flex
    fprintf(stderr, "Error at line %d: %s\n", yylineno, s);
}
%}

%debug

%token NEWLINE LBRACE RBRACE LPAREN RPAREN SEMICOLON EQUALS OR AND EQUALITY GREATER LESS PLUS MINUS MULT DIV MODULO CONCAT NOT PRINT IF ELSE COMBAT WHILE PROGRESS ACTION STRING INT INPUT IDENTIFIER NUMBER TYPE COMMA ACT ROLL

%start PROGRAM

%%

PROGRAM:
    | PROGRAM DECLARATION
    | PROGRAM TOP_LEVEL_STATEMENT
    ;

DECLARATION:
    ACTION IDENTIFIER LPAREN ARGS RPAREN TYPE BLOCK NEWLINE
    ;

ARGS:
    IDENTIFIER TYPE
    | ARGS COMMA IDENTIFIER TYPE
    ;

BLOCK:
    LBRACE STATEMENT_LIST RBRACE
    ;


STATEMENT_LIST:
    | STATEMENT_LIST STATEMENT
    ;
    

TOP_LEVEL_STATEMENT:
    ASSIGNMENT SEMICOLON NEWLINE
    | PRINT_STATEMENT SEMICOLON NEWLINE
    | IF_STATEMENT NEWLINE
    | COMBAT_STATEMENT NEWLINE
    | VAR SEMICOLON NEWLINE
    | NEWLINE
    ;

STATEMENT:
    ASSIGNMENT SEMICOLON NEWLINE
    | PRINT_STATEMENT SEMICOLON NEWLINE
    | IF_STATEMENT NEWLINE
    | COMBAT_STATEMENT NEWLINE
    | VAR SEMICOLON NEWLINE
    | ACT BOOLEXPRESSION SEMICOLON NEWLINE
    | NEWLINE
    ;

ASSIGNMENT:
    IDENTIFIER EQUALS BOOLEXPRESSION
    | IDENTIFIER FUNCARGS
    ;

FUNCARGS:
    LPAREN RPAREN
    | LPAREN BOOLEXPRESSION_LIST RPAREN
    ;

BOOLEXPRESSION_LIST:
    BOOLEXPRESSION
    | BOOLEXPRESSION_LIST COMMA BOOLEXPRESSION
    ;

IF_STATEMENT:
    IF BOOLEXPRESSION BLOCK
    | IF BOOLEXPRESSION BLOCK ELSE BLOCK
    ;


COMBAT_STATEMENT:
    COMBAT SEMICOLON ASSIGNMENT SEMICOLON WHILE BOOLEXPRESSION PROGRESS ASSIGNMENT BLOCK
    ;

PRINT_STATEMENT:
    PRINT LPAREN BOOLEXPRESSION RPAREN
    ;

VAR:
    TYPE IDENTIFIER EQUALS BOOLEXPRESSION
    ;



BOOLEXPRESSION:
    BOOLTERM
    | BOOLEXPRESSION OR BOOLTERM
    ;

BOOLTERM:
    RELEXPRESSION
    | BOOLTERM AND RELEXPRESSION
    ;

RELEXPRESSION:
    EXPRESSION
    | EXPRESSION EQUALITY EXPRESSION
    | EXPRESSION GREATER EXPRESSION
    | EXPRESSION LESS EXPRESSION
    ;

EXPRESSION:
    TERM
    | EXPRESSION PLUS TERM
    | EXPRESSION MINUS TERM
    ;

TERM:
    FACTOR
    | TERM MULT FACTOR
    | TERM DIV FACTOR
    ;

FACTOR:
    LPAREN BOOLEXPRESSION RPAREN
    | PLUS FACTOR
    | MINUS FACTOR
    | NOT FACTOR
    | IDENTIFIER
    | IDENTIFIER FUNCARGS
    | NUMBER
    | STRING
    | INPUT LPAREN RPAREN
    | ROLL LPAREN BOOLEXPRESSION RPAREN
    ;

%%

int main(void) {
    yydebug = 0;  // Activate Bison debugging
    return yyparse();
}
